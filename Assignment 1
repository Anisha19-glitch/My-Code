// Binary tree Create a binary tree and perform inorder ,preorder and postorder traversals.
class Node {
int data;
 Node left, right;
  // Constructor to create a new node
public Node(int item) {
 data = item;
 left = right = null;
   }
}
class BinaryTree {
Node root;
 // Inorder traversal (Left, Root, Right)
void inorder(Node node) {
        if (node == null)
            return;
        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
  }
    // Preorder traversal (Root, Left, Right)
    void preorder(Node node) {
        if (node == null)
           return;
        System.out.print(node.data + " ");
        preorder(node.left);
        preorder(node.right);
    }
    // Postorder traversal (Left, Right, Root)
void postorder(Node node) {
        if (node == null)
            return;
        postorder(node.left);
        postorder(node.right);
        System.out.print(node.data + " ");
    }
    // Driver code to test the binary tree and traversal methods
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        // Creating nodes
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
       tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        System.out.println("Inorder Traversal:");
        tree.inorder(tree.root); 
        System.out.println("\nPreorder Traversal:");
        tree.preorder(tree.root); 
       System.out.println("\nPostorder Traversal:");
       tree.postorder(tree.root); 
  }
}
