//Company wants to lease phone lines to connect its offices of different cities, with each other. Company charges different amounts of money to connect different pairs of offices. Solve the problem by suggesting appropriate data structures to connect all offices of a company with a minimum cost.
import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    public int compareTo(Edge compareEdge) {
        return this.weight - compareEdge.weight;
    }
}

class DisjointSet {
    int[] parent, rank;

    public DisjointSet(int n) {
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) parent[i] = i;
    }

    public int find(int i) {
        if (parent[i] != i)
            parent[i] = find(parent[i]); // Path compression
        return parent[i];
    }

    public void union(int x, int y) {
        int rootX = find(x), rootY = find(y);
        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY])
                parent[rootX] = rootY;
            else if (rank[rootX] > rank[rootY])
                parent[rootY] = rootX;
            else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }
}

class MST {
    int V;
    List<Edge> edges = new ArrayList<>();

    public MST(int V) {
        this.V = V;
    }

    public void addEdge(int src, int dest, int weight) {
        edges.add(new Edge(src, dest, weight));
    }

    public void kruskalMST() {
        Collections.sort(edges);
        DisjointSet ds = new DisjointSet(V);
        int minCost = 0;

        System.out.println("Minimum Cost Connections:");
        for (Edge edge : edges) {
            if (ds.find(edge.src) != ds.find(edge.dest)) {
                System.out.println("Office " + edge.src + " - Office " + edge.dest + " : Cost " + edge.weight);
                ds.union(edge.src, edge.dest);
                minCost += edge.weight;
            }
        }
        System.out.println("Total Minimum Cost: " + minCost);
    }

    public static void main(String[] args) {
        MST graph = new MST(6);

        graph.addEdge(0, 1, 4);
        graph.addEdge(0, 2, 4);
        graph.addEdge(1, 2, 2);
        graph.addEdge(1, 3, 6);
        graph.addEdge(2, 3, 8);
        graph.addEdge(2, 4, 9);
        graph.addEdge(3, 4, 5);
        graph.addEdge(3, 5, 11);
        graph.addEdge(4, 5, 7);

        graph.kruskalMST();
    }
}
